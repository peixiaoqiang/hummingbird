// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipallocator_service.proto

package ipallocatorservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IP struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Routes               []*Route `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
	ContainerID          string   `protobuf:"bytes,4,opt,name=containerID,proto3" json:"containerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IP) Reset()         { *m = IP{} }
func (m *IP) String() string { return proto.CompactTextString(m) }
func (*IP) ProtoMessage()    {}
func (*IP) Descriptor() ([]byte, []int) {
	return fileDescriptor_ipallocator_service_b572ec41fdb7a376, []int{0}
}
func (m *IP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IP.Unmarshal(m, b)
}
func (m *IP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IP.Marshal(b, m, deterministic)
}
func (dst *IP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IP.Merge(dst, src)
}
func (m *IP) XXX_Size() int {
	return xxx_messageInfo_IP.Size(m)
}
func (m *IP) XXX_DiscardUnknown() {
	xxx_messageInfo_IP.DiscardUnknown(m)
}

var xxx_messageInfo_IP proto.InternalMessageInfo

func (m *IP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IP) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *IP) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *IP) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

type Blank struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Blank) Reset()         { *m = Blank{} }
func (m *Blank) String() string { return proto.CompactTextString(m) }
func (*Blank) ProtoMessage()    {}
func (*Blank) Descriptor() ([]byte, []int) {
	return fileDescriptor_ipallocator_service_b572ec41fdb7a376, []int{1}
}
func (m *Blank) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blank.Unmarshal(m, b)
}
func (m *Blank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blank.Marshal(b, m, deterministic)
}
func (dst *Blank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blank.Merge(dst, src)
}
func (m *Blank) XXX_Size() int {
	return xxx_messageInfo_Blank.Size(m)
}
func (m *Blank) XXX_DiscardUnknown() {
	xxx_messageInfo_Blank.DiscardUnknown(m)
}

var xxx_messageInfo_Blank proto.InternalMessageInfo

type Route struct {
	Dst                  string   `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
	Gw                   string   `protobuf:"bytes,2,opt,name=gw,proto3" json:"gw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_ipallocator_service_b572ec41fdb7a376, []int{2}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (dst *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(dst, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

func (m *Route) GetGw() string {
	if m != nil {
		return m.Gw
	}
	return ""
}

func init() {
	proto.RegisterType((*IP)(nil), "ipallocatorservice.IP")
	proto.RegisterType((*Blank)(nil), "ipallocatorservice.Blank")
	proto.RegisterType((*Route)(nil), "ipallocatorservice.Route")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IPAllocatorClient is the client API for IPAllocator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPAllocatorClient interface {
	AllocateNext(ctx context.Context, in *IP, opts ...grpc.CallOption) (*IP, error)
	Release(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Blank, error)
}

type iPAllocatorClient struct {
	cc *grpc.ClientConn
}

func NewIPAllocatorClient(cc *grpc.ClientConn) IPAllocatorClient {
	return &iPAllocatorClient{cc}
}

func (c *iPAllocatorClient) AllocateNext(ctx context.Context, in *IP, opts ...grpc.CallOption) (*IP, error) {
	out := new(IP)
	err := c.cc.Invoke(ctx, "/ipallocatorservice.IPAllocator/AllocateNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPAllocatorClient) Release(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Blank, error) {
	out := new(Blank)
	err := c.cc.Invoke(ctx, "/ipallocatorservice.IPAllocator/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPAllocatorServer is the server API for IPAllocator service.
type IPAllocatorServer interface {
	AllocateNext(context.Context, *IP) (*IP, error)
	Release(context.Context, *IP) (*Blank, error)
}

func RegisterIPAllocatorServer(s *grpc.Server, srv IPAllocatorServer) {
	s.RegisterService(&_IPAllocator_serviceDesc, srv)
}

func _IPAllocator_AllocateNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAllocatorServer).AllocateNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipallocatorservice.IPAllocator/AllocateNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAllocatorServer).AllocateNext(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPAllocator_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPAllocatorServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipallocatorservice.IPAllocator/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPAllocatorServer).Release(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPAllocator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipallocatorservice.IPAllocator",
	HandlerType: (*IPAllocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateNext",
			Handler:    _IPAllocator_AllocateNext_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _IPAllocator_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipallocator_service.proto",
}

func init() {
	proto.RegisterFile("ipallocator_service.proto", fileDescriptor_ipallocator_service_b572ec41fdb7a376)
}

var fileDescriptor_ipallocator_service_b572ec41fdb7a376 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0x2c, 0x48, 0xcc,
	0xc9, 0xc9, 0x4f, 0x4e, 0x2c, 0xc9, 0x2f, 0x8a, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x42, 0x92, 0x82, 0xca, 0x28, 0x35, 0x33, 0x72, 0x31,
	0x79, 0x06, 0x08, 0xf1, 0x71, 0x31, 0x65, 0x16, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x31,
	0x65, 0x16, 0x08, 0x49, 0x70, 0xb1, 0xa7, 0x27, 0x96, 0xa4, 0x96, 0x27, 0x56, 0x4a, 0x30, 0x81,
	0x05, 0x61, 0x5c, 0x21, 0x43, 0x2e, 0xb6, 0xa2, 0xfc, 0xd2, 0x92, 0xd4, 0x62, 0x09, 0x66, 0x05,
	0x66, 0x0d, 0x6e, 0x23, 0x49, 0x3d, 0x4c, 0x53, 0xf5, 0x82, 0x40, 0x2a, 0x82, 0xa0, 0x0a, 0x85,
	0x14, 0xb8, 0xb8, 0x93, 0xf3, 0xf3, 0x4a, 0x12, 0x33, 0xf3, 0x52, 0x8b, 0x3c, 0x5d, 0x24, 0x58,
	0xc0, 0x06, 0x22, 0x0b, 0x29, 0xb1, 0x73, 0xb1, 0x3a, 0xe5, 0x24, 0xe6, 0x65, 0x2b, 0x69, 0x72,
	0xb1, 0x82, 0xf5, 0x0a, 0x09, 0x70, 0x31, 0xa7, 0x14, 0x97, 0x40, 0x5d, 0x04, 0x62, 0x82, 0x9c,
	0x98, 0x5e, 0x0e, 0x75, 0x0d, 0x53, 0x7a, 0xb9, 0x51, 0x3f, 0x23, 0x17, 0xb7, 0x67, 0x80, 0x23,
	0xcc, 0x6a, 0x21, 0x07, 0x2e, 0x1e, 0x28, 0x27, 0xd5, 0x2f, 0xb5, 0xa2, 0x44, 0x48, 0x0c, 0x9b,
	0xc3, 0x3c, 0x03, 0xa4, 0x70, 0x88, 0x2b, 0x31, 0x08, 0xd9, 0x71, 0xb1, 0x07, 0xa5, 0xe6, 0xa4,
	0x26, 0x16, 0xa7, 0xe2, 0xd4, 0x8c, 0xd5, 0xb7, 0x10, 0xa7, 0x33, 0x24, 0xb1, 0x81, 0x83, 0xd9,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x42, 0x85, 0x3e, 0xb6, 0x83, 0x01, 0x00, 0x00,
}
